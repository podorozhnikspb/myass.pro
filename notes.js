window.tagStyles = {
  "Python":       { bg: "#e0f7fa", color: "#000000" },
  "YouTube API":  { bg: "#fff3cd", color: "#000000" },
  "Telegram API": { bg: "#ffe0f0", color: "#000000" },
  "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è":{ bg: "#e6ee9c", color: "#000000" },
  "–ü–∞—Ä—Å–∏–Ω–≥":      { bg: "#d1c4e9", color: "#000000" },
  "–°–∫—Ä–∏–ø—Ç—ã":      { bg: "#f8bbd0", color: "#000000" },
  "Cron":         { bg: "#c8e6c9", color: "#000000" },
  "API":          { bg: "#b3e5fc", color: "#000000" }, // –ù–æ–≤—ã–π —Ç–µ–≥
  "–ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö":  { bg: "#ffccbc", color: "#000000" }, // –ù–æ–≤—ã–π —Ç–µ–≥
  "–°–µ—Ç–∏":         { bg: "#dcedc8", color: "#000000" }  // –ù–æ–≤—ã–π —Ç–µ–≥
};

window.notes = [
  {
    title: "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ –Ω–∞ YouTube",
    date: "2025-05-18",
    tags: ["Python", "YouTube API", "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è"],
    content: `–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç —É–ø—Ä–æ—Å—Ç–∏—Ç—å —Ä—É—Ç–∏–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏.

> ¬´–õ—É—á—à–µ–µ ‚Äî –≤—Ä–∞–≥ —Ö–æ—Ä–æ—à–µ–≥–æ. –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–π —Ç–æ–ª—å–∫–æ —Ç–æ, —á—Ç–æ —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ä—É–∫–∞–º–∏.¬ª

–ü—Ä–∏–º–µ—Ä —Å–∫—Ä–∏–ø—Ç–∞:

from googleapiclient.discovery import build

def upload(video_path, title):
    youtube = build("youtube", "v3", credentials=creds)
    request = youtube.videos().insert(
        part="snippet,status",
        body={"snippet": {"title": title}},
        media_body=video_path
    )
    request.execute()
`
  },
  {
    title: "–ü–∞—Ä—Å–∏–Ω–≥ Telegram API —Å –ø–æ–º–æ—â—å—é Telethon",
    date: "2025-05-20",
    tags: ["Python", "Telegram API", "–ü–∞—Ä—Å–∏–Ω–≥"],
    content: `–î–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Telegram —É–¥–æ–±–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É Telethon.

> ¬´–î–∞–Ω–Ω—ã–µ ‚Äî —ç—Ç–æ –Ω–æ–≤—ã–π –Ω–µ—Ñ—Ç—å. –ù–æ —Å–Ω–∞—á–∞–ª–∞ –∏—Ö –Ω—É–∂–Ω–æ –¥–æ–±—ã—Ç—å.¬ª

from telethon import TelegramClient

client = TelegramClient("session", api_id, api_hash)
await client.start()

participants = await client.get_participants("somechannel")
for user in participants:
    print(user.username)
`
  },
  {
    title: "–ó–∞–ø—É—Å–∫ Python-—Å–∫—Ä–∏–ø—Ç–æ–≤ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é (cron)",
    date: "2025-05-21",
    tags: ["Python", "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è", "Cron"],
    content: `–ï—Å–ª–∏ –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞—á–∏ —Ä–µ–≥—É–ª—è—Ä–Ω–æ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π cron.

üïí –ü—Ä–∏–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è:

0 */6 * * * /usr/bin/python3 /home/user/upload.py

–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ –º–æ–∂–Ω–æ —Ç–∞–∫:

cat /var/log/syslog | grep CRON
`
  },
  {
    title: "–ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π Telegram –±–æ—Ç",
    date: "2025-05-22",
    tags: ["Python", "Telegram API", "–°–∫—Ä–∏–ø—Ç—ã"],
    content: `–ü—Ä–æ—Å—Ç–æ–π Telegram-–±–æ—Ç –Ω–∞ Telebot:

import telebot

bot = telebot.TeleBot("TOKEN")

@bot.message_handler(commands=["start"])
def send_welcome(message):
    bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç!")

bot.polling()
`
  },
  {
    title: "–•—Ä–∞–Ω–∏–º –∫–æ–Ω—Ñ–∏–≥–∏ –æ—Ç–¥–µ–ª—å–Ω–æ –æ—Ç –∫–æ–¥–∞",
    date: "2025-05-23",
    tags: ["Python", "–°–∫—Ä–∏–ø—Ç—ã"],
    content: `–•—Ä–∞–Ω–µ–Ω–∏–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤–Ω—É—Ç—Ä–∏ –∫–æ–¥–∞ ‚Äî –ø–ª–æ—Ö–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞.

–§–∞–π–ª .env:

API_KEY=abc123
SECRET=xyz456

Python:

from dotenv import load_dotenv
import os

load_dotenv()
key = os.getenv("API_KEY")
`
  },
  {
    title: "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API",
    date: "2025-05-24",
    tags: ["Python", "API", "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è"],
    content: `–î–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ.

–ü—Ä–∏–º–µ—Ä —Å –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π requests:

import requests
from functools import lru_cache

@lru_cache(maxsize=128)
def get_data(url):
    return requests.get(url).json()
`
  },
  {
    title: "–†–∞–±–æ—Ç–∞ —Å SQLite –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö",
    date: "2025-05-25",
    tags: ["Python", "–ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"],
    content: `SQLite ‚Äî –ª–µ–≥–∫–æ–≤–µ—Å–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤.

–ü—Ä–∏–º–µ—Ä:

import sqlite3

conn = sqlite3.connect("data.db")
cursor = conn.cursor()
cursor.execute("CREATE TABLE IF NOT EXISTS users (id INTEGER, name TEXT)")
conn.commit()
conn.close()
`
  },
  {
    title: "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
    date: "2025-05-26",
    tags: ["Python", "–°–µ—Ç–∏", "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è"],
    content: `–î–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–µ—Ç–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å psutil.

–ü—Ä–∏–º–µ—Ä:

import psutil

for conn in psutil.net_connections():
    print(conn.laddr, conn.raddr)
`
  },
  {
    title: "–ü–∞—Ä—Å–∏–Ω–≥ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü —Å BeautifulSoup",
    date: "2025-05-27",
    tags: ["Python", "–ü–∞—Ä—Å–∏–Ω–≥"],
    content: `BeautifulSoup —É–ø—Ä–æ—â–∞–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ HTML.

–ü—Ä–∏–º–µ—Ä:

from bs4 import BeautifulSoup
import requests

page = requests.get("https://example.com")
soup = BeautifulSoup(page.content, "html.parser")
print(soup.find_all("h1"))
`
  },
  {
    title: "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram",
    date: "2025-05-28",
    tags: ["Python", "Telegram API", "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è"],
    content: `–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ Telegram API.

–ü—Ä–∏–º–µ—Ä:

import requests

def send_message(token, chat_id, text):
    url = f"https://api.telegram.org/bot{token}/sendMessage"
    payload = {"chat_id": chat_id, "text": text}
    requests.post(url, json=payload)
`
  }
];